import React, { useState, useEffect } from "react";
import axios from "axios";
import {
  FiCamera, FiServer, FiShield, FiBattery, FiCpu, FiWifi, FiPhone, FiEye, FiInbox, FiBarChart2, FiUser,
  FiShoppingCart, FiPlusCircle, FiTrash2, FiEdit2, FiArrowLeft
} from "react-icons/fi";
import "./App.css";
import { FaWhatsapp } from "react-icons/fa";
import Footer from "./Footer";
import { supabase } from "./supabaseClient";





const API_URL = "http://localhost:5000";


const categoryIcons = {
  CCTV: <FiCamera />,
  Networking: <FiServer />,
  Alarms: <FiShield />,
  "Electric Fencing": <FiBattery />,
  Computing: <FiCpu />,
  "Wi-Fi": <FiWifi />,
  Telephone: <FiPhone />,
  Biometrics: <FiEye />,
  "Fibre Optic": <FiInbox />,
  Backups: <FiBattery />,
  Electrical: <FiBarChart2 />
};
const categories = Object.keys(categoryIcons);


// --- DEMO DEALS PRODUCTS --- //
const demoProducts = [
  {
    id: "demo-1",
    name: "Wireless CCTV Camera",
    price: 6500,
    discountPrice: 5000,
    category: "CCTV",
    description: "Super HD wireless CCTV for home & business.",
    image: "/Logo.jpg",
    inventory: 20
  },
  {
    id: "demo-2",
    name: "Smart Alarm System",
    price: 8000,
    discountPrice: 6000,
    category: "Alarms",
    description: "Protect your property with remotely activated alarms.",
    image: "/Logo.jpg",
    inventory: 10
  },
  {
    id: "demo-3",
    name: "Fiber Optic Router",
    price: 12000,
    discountPrice: 9900,
    category: "Networking",
    description: "Fast, reliable fiber optics for stable internet.",
    image: "/Logo.jpg",
    inventory: 15
  }
];


function App() {
  const [cart, setCart] = useState([]);
  const [showCart, setShowCart] = useState(false);
  const [search, setSearch] = useState("");
  const [selectedCat, setSelectedCat] = useState("All");
  const [allProducts, setAllProducts] = useState([]);
  const [showAuth, setShowAuth] = useState(false);
  const [authTab, setAuthTab] = useState("login");
  const [authEmail, setAuthEmail] = useState("");
  const [currentUser, setCurrentUser] = useState(null);
  const [signupError, setSignupError] = useState(null);
  const [loginError, setLoginError] = useState(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [showAdmin, setShowAdmin] = useState(false);
  const [adminTab, setAdminTab] = useState("products");
  const [adminLoginError, setAdminLoginError] = useState("");
  const [users, setUsers] = useState([]);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
const addDemoProductsToSupabase = async () => {
  try {
    const productData = demoProducts.map(prod => ({
      name: prod.name,
      price: prod.price,
      discountprice: prod.discountPrice,
      category: prod.category,
      description: prod.description,
      inventory: prod.inventory,
      image: prod.image
    }));
    const { data, error } = await supabase.from("products").insert(productData);
    if (error) throw error;
    alert("Demo products added!");
    fetchProducts();
  } catch (err) {
    alert("Error adding demo products: " + err.message);
  }
};



  // Add discountPrice for deals
  const [newProduct, setNewProduct] = useState({
    name: "",
    price: "",
    discountPrice: "",
    category: categories[0],
    description: "",
    inventory: 10,
    image: ""
  });
  const [editProduct, setEditProduct] = useState(null);


  const [previewImageAdd, setPreviewImageAdd] = useState(null);
  const [previewImageEdit, setPreviewImageEdit] = useState(null);
  const [adminEmail, setAdminEmail] = useState('');
  const [authPassword, setAuthPassword] = useState('');
  const [checkoutDetails, setCheckoutDetails] = useState({ phone: "", address: "" });
  const [checkoutError, setCheckoutError] = useState(null);


  useEffect(() => { fetchProducts(); }, [isAdmin]);
  useEffect(() => { if (isAdmin && adminTab === "users") fetchUsers(); }, [isAdmin, adminTab]);


  const fetchProducts = async () => {
    try {
      const { data, error } = await supabase.from("products").select("*");
      if (error) throw error;
      setAllProducts([...demoProducts, ...(data || [])]);
    } catch (err) {
      setAllProducts(demoProducts);
      console.error("Error fetching products:", err);
    }
  };
  const fetchUsers = async () => {
    // Note: Listing users requires Supabase Admin API
    // For now, this is disabled. You can implement it with a backend function
    console.log("User listing requires admin API");
  };


  const loginUser = async (e) => {
  e.preventDefault();
  setLoginError(null);
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email: authEmail,
      password: authPassword
    });
    if (error) throw error;
    setCurrentUser(data.user);
    setShowAuth(false);
    setAuthPassword(""); 
    setAuthEmail("");
  } catch (err) {
    setLoginError(err.message || "Login failed.");
  }
};
const signupUser = async (e) => {
  e.preventDefault();
  setSignupError(null);
  try {
    const { data, error } = await supabase.auth.signUp({
      email: e.target.email.value,
      password: e.target.password.value,
      options: {
        data: {
          name: e.target.name.value
        }
      }
    });
    if (error) throw error;
    setCurrentUser(data.user);
    setShowAuth(false);
    alert("Account created! Please check your email to verify.");
  } catch (err) {
    setSignupError(err.message || "Signup failed.");
  }
};

 const handleAdminLogin = async (e) => {
  e.preventDefault();
  setAdminLoginError("");
  try {
    const { data, error } = await supabase.auth.getUser();
    if (error) throw error;
    if (data.user && data.user.user_metadata && data.user.user_metadata.role === 'admin') {
      setCurrentUser(data.user);
      setIsAdmin(true);
      setShowAdmin(false);
    } else {
      setAdminLoginError("You don't have admin privileges");
    }
  } catch (err) {
    console.error(err);
    setAdminLoginError(err.message || "Login failed");
  }
};

  const logout =async () => {
    await supabase.auth.signOut();
    setCurrentUser(null);
    setIsAdmin(false);
    setShowAdmin(false);
    setShowAuth(false);
    setAdminTab("products");
  };


  const addToCart = product => setCart([...cart, product]);
  const removeProduct = async (id) => {
  try {
    const { error } = await supabase.from("products").delete().eq("id", id);
    if (error) throw error;
    fetchProducts();
  } catch (err) {
    alert("Error deleting product: " + err.message);
  }
};


  const handleAddImageChange = e => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (evt) => {
        setPreviewImageAdd(evt.target.result);
        setNewProduct({ ...newProduct, image: evt.target.result });
      };
      reader.readAsDataURL(file);
    }
  };


  const handleEditImageChange = e => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (evt) => {
        setPreviewImageEdit(evt.target.result);
        setEditProduct({ ...editProduct, image: evt.target.result });
      };
      reader.readAsDataURL(file);
    }
  };
const addNewProduct = async (e) => {
  e.preventDefault();
 try {
    const { data, error } = await supabase.from("products").insert([{
      name: newProduct.name,
      price: parseFloat(newProduct.price),
      discountprice: newProduct.discountPrice ? parseFloat(newProduct.discountPrice) : null,
      category: newProduct.category,
      description: newProduct.description,
      inventory: parseInt(newProduct.inventory),
      image: newProduct.image
    }]);
    if (error) throw error;
    setNewProduct({ name: "", price: "", discountPrice: "", category: categories[0], description: "", inventory: 10, image: "" });
    setPreviewImageAdd(null);
    setShowAddModal(false);
    fetchProducts();
  } catch (err) {
    alert("Error adding product: " + err.message);
  }
};



  const startEdit = (product) => {
    setEditProduct({ ...product });
    setPreviewImageEdit(product.image || null);
    setShowEditModal(true);
  };


  const updateProduct = async (e) => {
  e.preventDefault();
  try {
    const { error } = await supabase.from("products").update({
      name: editProduct.name,
      price: parseFloat(editProduct.price),
      discountprice: editProduct.discountPrice ? parseFloat(editProduct.discountPrice) : null,
      category: editProduct.category,
      description: editProduct.description,
      inventory: parseInt(editProduct.inventory),
      image: editProduct.image
    }).eq("id", editProduct.id);
    if (error) throw error;
    setEditProduct(null);
    setPreviewImageEdit(null);
    setShowEditModal(false);
    fetchProducts();
  } catch (err) {
    alert("Error updating product: " + err.message);
  }
};



  const handleMpesaPayment = () => {
    if (!checkoutDetails.phone || !checkoutDetails.address) {
      setCheckoutError("Please provide phone number and address");
      return;
    }
    alert(`STK push sent to ${checkoutDetails.phone} for delivery to ${checkoutDetails.address}`);
    setShowCart(false);
    setCheckoutDetails({ phone: "", address: "" });
    setCheckoutError(null);
    setCart([]);
  };


  const cartTotal = cart.reduce((sum, item) => sum + parseFloat(item.price || 0), 0);


  return (
    <div className="app-bg">
      {/* WhatsApp Floating Button */}
      <a
        href="https://wa.me/254790999150?text=Hello%20Mastertec%20Solutions"
        target="_blank"
        rel="noopener noreferrer"
        style={{
          position: "fixed",
          bottom: "30px",
          right: "30px",
          width: "64px",
          height: "64px",
          zIndex: 1000,
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          background: "#25d366",
          borderRadius: "18px",
          boxShadow: "0 4px 24px rgba(0,0,0,0.18)"
        }}
        aria-label="WhatsApp"
        title="Chat with us on WhatsApp"
      >
        <svg width="40" height="40" viewBox="0 0 40 40" fill="none">
          <path
            d="M20 36.666C29.204 36.666 36.666 29.203 36.666 20C36.666 10.796 29.204 3.333 20 3.333 10.796 3.333 3.333 10.796 3.333 20 3.333 22.817 4.078 25.431 5.403 27.658L3.333 36.666 12.487 34.618C14.662 35.745 17.252 36.666 20 36.666Z"
            fill="#0a0a0aff" opacity=".2"
          />
          <circle cx="20" cy="20" r="16" fill="#25d366" />
          <path d="M27.364 23.672c-.348-.174-2.053-1.017-2.372-1.133-.319-.116-.551-.174-.783.174-.232.348-.899 1.133-1.104 1.366-.205.232-.405.261-.753.087-.348-.174-1.473-.543-2.806-1.728-1.037-.925-1.737-2.067-1.943-2.415-.205-.348-.023-.536.155-.71.16-.159.348-.405.522-.609.174-.203.232-.348.348-.58.116-.232.058-.435-.029-.609-.087-.174-.783-1.961-1.073-2.68-.287-.693-.584-.599-.783-.61l-.667-.012c-.174 0-.435.058-.666.29-.232.232-.882.858-.882 2.088s.903 2.422 1.029 2.59c.126.174 1.771 2.71 4.29 3.69.601.218 1.07.348 1.437.445.603.161 1.151.138 1.583.084.483-.062 1.481-.605 1.688-1.19.207-.584.207-1.083.145-1.19-.058-.109-.232-.174-.48-.29Z"
            fill="#fffefeff"
          />
        </svg>
      </a>


      {/* Header/Navbar Section */}
      <div className="navbar">
        <div className="navbar-content">
          <div className="brand" style={{ display: "flex", alignItems: "center", gap: "12px" }}>
            <img src="/Logo.jpg" alt="Logo" style={{ height: "48px", width: "48px" }} />
            <span>Mastertec Solution</span>
          </div>
          <div className="header-center">
            <input
              className="search-bar"
              type="text"
              placeholder="Search products..."
              value={search}
              onChange={e => setSearch(e.target.value)}
            />
          </div>
          <div className="nav-actions">
            <button className="auth-btn"
              onClick={() => {
                if (currentUser) {
                  logout();
                } else {
                  setAuthTab("login"); setShowAuth(true);
                }
              }}>
              Account {currentUser ? `(Log Out)` : ""}
              <FiUser style={{ marginLeft: 7 }} />
            </button>
            <button className="auth-btn" onClick={() => setShowCart(true)}>
              <span className="react-icon"><FiShoppingCart /></span>
              <span className="cart-count">{cart.length}</span>
            </button>
            <button
              className="auth-btn"
              onClick={() => {
                const aboutFooter = document.getElementById("about-footer");
                if (aboutFooter) {
                  aboutFooter.scrollIntoView({ behavior: "smooth" });
                }
              }}
            >
              Contact Us
            </button>
            <button className="auth-btn" onClick={() => setShowAdmin(true)}>
              Admin Sign In
            </button>
          </div>
        </div>
      </div>
      {showAuth && (
        <div className="auth-modal">
          {authTab === "login" ? (
            <form className="auth-form" onSubmit={loginUser}>
               <input type="email" name="email" id="login-email" required placeholder="Email"
      value={authEmail} onChange={e => setAuthEmail(e.target.value)} />
    <input type="password" name="password" id="login-password" required placeholder="Password"
      value={authPassword} onChange={e => setAuthPassword(e.target.value)} />
  <button type="submit">Log In</button>
   {loginError && <div className="auth-error">{loginError}</div>}
              <div style={{ display: 'flex', gap: 10, marginTop: 10 }}>
                <button type="button" onClick={() => setAuthTab("signup")}>Switch to Sign Up</button>
                <button type="button" onClick={() => setShowAuth(false)}>Cancel</button>
              </div>
            </form>
          ) : (
             <form className="auth-form" onSubmit={signupUser}>
                <input type="text" name="name" id="signup-name" required placeholder="Full Name" />
                <input type="email" name="email" id="signup-email" required placeholder="Email" />
                <input type="password" name="password" id="signup-password" required placeholder="Password" />
                <button type="submit">Sign Up</button>
             {signupError && <div className="auth-error">{signupError}</div>}
              <div style={{ display: 'flex', gap: 10, marginTop: 10 }}>
                <button type="button" onClick={() => setAuthTab("login")}>Switch to Log In</button>
                <button type="button" onClick={() => setShowAuth(false)}>Cancel</button>
              </div>
            </form>
          )}
        </div>
      )}
      {showAdmin && (
        <div className="auth-modal">
          <form className="auth-form" onSubmit={handleAdminLogin}>
            <h3>Admin Sign In</h3>
            <input type="text" name="name"id="admin-name" required placeholder="Admin Name" />
            <input type="password" name="password"id="admin-password" required placeholder="Admin Password" />
            <button type="submit">Sign In</button>
            <button type="button" onClick={() => setShowAdmin(false)}>Cancel</button>
            {adminLoginError && <div className="auth-error">{adminLoginError}</div>}
          </form>
        </div>
      )}
      {isAdmin ? (
        <div className="admin-area">
          <button className="shop-btn" style={{ marginBottom: 20 }} onClick={() => setIsAdmin(false)}>
            <FiArrowLeft /> Back to Shop
          </button>
          <div className="admin-tabs" style={{ display: "flex", gap: 20, marginBottom: 20 }}>
            <button onClick={() => setAdminTab("products")} className={adminTab === "products" ? "admin-tab-selected" : ""}>Products</button>
            <button onClick={() => setAdminTab("users")} className={adminTab === "users" ? "admin-tab-selected" : ""}>Users</button>
            <button onClick={() => setAdminTab("reports")} className={adminTab === "reports" ? "admin-tab-selected" : ""}>Reports</button>
          </div>
          {adminTab === "products" && (
            <>
              <button className="admin-btn" style={{ margin: "1em 0" }} onClick={addDemoProductsToSupabase}>
      Add DEMO Products to Supabase
    </button>
              <button className="admin-btn" style={{ margin: "1em 0" }} onClick={() => setShowAddModal(true)}>
                <FiPlusCircle /> Add Product
              </button>
              {showAddModal && (
                <div className="modal-bg">
                  <form onSubmit={addNewProduct} className="admin-product-form modal-form">
                    <h3>Add Product</h3>
                    <input type="text" placeholder="Name" value={newProduct.name}
                      required onChange={e => setNewProduct({ ...newProduct, name: e.target.value })} />
                    <input type="text" placeholder="Price" value={newProduct.price}
                      required onChange={e => setNewProduct({ ...newProduct, price: e.target.value })} />
                    <input type="text" placeholder="Discount Price" value={newProduct.discountPrice}
                      onChange={e => setNewProduct({ ...newProduct, discountPrice: e.target.value })} />
                    <input type="file" accept="image/*"
                      onChange={handleAddImageChange} />
                    {previewImageAdd && <img src={previewImageAdd} alt="Preview" style={{ maxWidth: "100px", marginBottom: "10px" }} />}
                    <select
                      value={newProduct.category}
                      onChange={e => setNewProduct({ ...newProduct, category: e.target.value })}
                    >
                      {categories.map(cat => (
                        <option value={cat} key={cat}>{cat}</option>
                      ))}
                    </select>
                    <input type="text" placeholder="Description" value={newProduct.description}
                      required onChange={e => setNewProduct({ ...newProduct, description: e.target.value })} />
                    <input type="number" placeholder="Inventory" value={newProduct.inventory}
                      required onChange={e => setNewProduct({ ...newProduct, inventory: e.target.value })} />
                    <div style={{ display: "flex", gap: 10 }}>
                      <button type="submit" className="admin-btn"><FiPlusCircle /> Add</button>
                      <button type="button" className="admin-btn" onClick={() => { setShowAddModal(false); setPreviewImageAdd(null); }}>Cancel</button>
                    </div>
                  </form>
                </div>
              )}
              {showEditModal && editProduct && (
                <div className="modal-bg">
                  <form className="admin-product-form modal-form" onSubmit={updateProduct}>
                    <h3>Edit Product</h3>
                    <input type="text" value={editProduct.name} onChange={e => setEditProduct({ ...editProduct, name: e.target.value })} required />
                    <input type="text" value={editProduct.price} onChange={e => setEditProduct({ ...editProduct, price: e.target.value })} required />
                    <input type="text" value={editProduct.discountPrice || ""} placeholder="Discount Price" onChange={e => setEditProduct({ ...editProduct, discountPrice: e.target.value })} />
                    <input type="file" accept="image/*" onChange={handleEditImageChange} />
                    {previewImageEdit && <img src={previewImageEdit} alt="Preview" style={{ maxWidth: "100px", marginBottom: "10px" }} />}
                    <select value={editProduct.category} onChange={e => setEditProduct({ ...editProduct, category: e.target.value })}>
                      {categories.map(cat => (
                        <option value={cat} key={cat}>{cat}</option>
                      ))}
                    </select>
                    <input type="text" value={editProduct.description} onChange={e => setEditProduct({ ...editProduct, description: e.target.value })} required />
                    <input type="number" value={editProduct.inventory} onChange={e => setEditProduct({ ...editProduct, inventory: e.target.value })} required />
                    <div style={{ display: "flex", gap: 10 }}>
                      <button type="submit" className="admin-btn"><FiEdit2 /> Save</button>
                      <button type="button" className="admin-btn" onClick={() => { setEditProduct(null); setShowEditModal(false); setPreviewImageEdit(null); }}>Cancel</button>
                    </div>
                  </form>
                </div>
              )}
             <div id="products" className="products-section">
  <h2>Our Products</h2>
  <div className="product-grid">
    {allProducts
      .filter(product => (selectedCat === "All" ? true : product.category === selectedCat))
      .filter(product => product.name.toLowerCase().includes(search.toLowerCase()))
      .map(product => (
        <div key={product.id} className="product-card">
          <img src={product.image || "/Logo.jpg"} alt={product.name} />
          <div className="product-info">
            <h3>{product.name}</h3>
            <p>{product.description}</p>
            <div className="price">Ksh {product.price}</div>
            <button onClick={(e) => addToCart(product, e)}>Add to Cart</button>
          </div>
        </div>
      ))}
  </div>
</div>

            </>
          )}
          {adminTab === "users" && (
            <div>
              <h2>Users</h2>
              <ul>
                {users.map((user, i) => (
                  <li key={user.id || i}>{user.name} ({user.email}) - {user.role}</li>
                ))}
              </ul>
            </div>
          )}
          {adminTab === "reports" && (
            <div>
              <h2>Reports</h2>
              <div>No reports yet (add backend logic for data)</div>
            </div>
          )}
        </div>
      ) : (
        <>
          <div className="hero-section">
            <h1>Get the Best Security & Tech Solutions</h1>
            <p>Choose from top brands and categories, delivered fast across Kenya</p>
            <a href="#products" className="shop-btn">Shop Now</a>
          </div>
          <div className="category-tabs">
            {categories.map(cat => (
              <button
                key={cat}
                className={`cat-btn${selectedCat === cat ? " cat-selected" : ""}`}
                onClick={() => setSelectedCat(cat)}
              >
                <span className="cat-icon">{categoryIcons[cat]}</span>
                {cat}
              </button>
            ))}
          </div>
          {/* --- DEALS SECTION --- */}
          <div className="deals-section">
            <h2>Deals & Discounts</h2>
            <div className="product-grid">
              {allProducts
                .filter(product => product.discountPrice && product.discountPrice < product.price)
                .map(product => (
                  <div key={product.id} className="product-card">
                    <img src={product.image || "/Logo.jpg"} alt={product.name} />
                    <div className="product-info">
                      <h3>{product.name}</h3>
                      <div className="price">
                        <span className="discounted-price">Ksh {product.discountPrice}</span>
                        <span className="original-price">Ksh {product.price}</span>
                      </div>
                      <p>{product.description}</p>
                      <button onClick={(e) => addToCart(product, e)}>Add to Cart</button>
                    </div>
                  </div>
                ))}
            </div>
          </div>
          {/* --- END DEALS SECTION --- */}
         <div id="products" className="products-section">
  <h2>Our Products</h2>
  <div className="product-grid">
    {allProducts
      .filter(product => (selectedCat === "All" ? true : product.category === selectedCat))
      .filter(product => product.name.toLowerCase().includes(search.toLowerCase()))
      .map(product => (
        <div key={product.id} className="product-card">
          <img src={product.image || "/Logo.jpg"} alt={product.name} />
          <div className="product-info">
            <h3>{product.name}</h3>
            <p>{product.description}</p>
            <div className="price">Ksh {product.price}</div>
            <button onClick={(e) => addToCart(product, e)}>Add to Cart</button>
          </div>
        </div>
      ))}
  </div>
</div>


          {showCart && (
            <div className="cart-sidebar">
              <h3>Your Cart</h3>
              {cart.length === 0 && <div>No items in cart.</div>}
              {cart.map((item, idx) => (
                <div key={idx} className="cart-item">
                  <span className="cart-item-name">{item.name}</span>
                  <span className="cart-item-qty">x1</span>
                  <span className="cart-item-price">Ksh {item.price}</span>
                </div>
              ))}
              <div style={{ marginTop: 16, fontWeight: "bold" }}>
                Total: Ksh {cartTotal}
              </div>
              <div style={{ marginTop: 20 }}>
                <input
                  type="text"
                  id="checkout-phone"
                  placeholder="Your phone number"
                  value={checkoutDetails.phone}
                  onChange={e => setCheckoutDetails({ ...checkoutDetails, phone: e.target.value })}
                  style={{ width: "100%", marginBottom: 8 }}
                />
                <input
                  type="text"
                  id="checkout-address"
                  placeholder="Delivery address"
                  value={checkoutDetails.address}
                  onChange={e => setCheckoutDetails({ ...checkoutDetails, address: e.target.value })}
                  style={{ width: "100%", marginBottom: 8 }}
                />
                {checkoutError && <div className="auth-error">{checkoutError}</div>}
                {currentUser ? (
                  <button className="checkout-btn" style={{ marginBottom: 8 }} onClick={handleMpesaPayment}>
                    Pay Now (MPESA STK)
                  </button>
                ) : (
                  <button className="checkout-btn" style={{ marginBottom: 8 }} onClick={() => {
                    setShowCart(false);
                    setAuthTab("login");
                    setShowAuth(true);
                  }}>
                    Login or Sign Up to Complete Purchase
                  </button>
                )}
                <button className="checkout-btn" onClick={() => setShowCart(false)}>
                  Close Cart
                </button>
              </div>
            </div>
          )}
        </>
      )}
      {/* FOOTER ALWAYS AT THE BOTTOM */}
      <Footer />
    </div>
  );
}


export default App;